#!/bin/env python3
""" Parse syscalls definitions generated by systrack (https://github.com/mebeim/systrack)
"""
import json
#import pprint as pp
from pprint import pprint



with open("syscalls/syscalls_x86_64_x64_v6.2.json", "r+") as f:
    x86_64 = f.read()
    #pprint.pprint(x86_64)

x86_64 = json.loads(x86_64)
#pprint.pprint(x86_64)


# Print syscall table
syscalls = x86_64['syscalls']
#print("No\tSymbol\t\tDefinition")
#for syscall in syscalls:
#    definition = f"{syscall['origname']}("
#    for arg in syscall['signature']:
#        definition += f" {arg}"
#    definition += " )"
#    print(f"{syscall['number']}\t{syscall['symbol']}\t\t{definition}")

def generate_syscall_table(syscalls):
    """ Generate the syscall table as an array.
    """
    table = "["
    for syscall in syscalls:
        number = syscall['number']
        name = syscall['origname']
        table += f'("{name}", {hex(number)}),'
    table += "]"
    return table


table_x86_64 = generate_syscall_table(syscalls)
print(table_x86_64)
print()


# x86_64 x32 ABI
with open("syscalls/syscalls_x86_64_x32_v6.2.json", "r+") as f:
    x86 = f.read()

x86 = json.loads(x86)
syscalls = x86['syscalls']
table_x86 = generate_syscall_table(syscalls)
print(table_x86)
print()



# mips
with open("syscalls/syscalls_mips_32_o32_v6.2.json", "r+") as f:
    mipso32 = f.read()

mipso32 = json.loads(mipso32)
syscalls = mipso32['syscalls']
table_mipso32 = generate_syscall_table(syscalls)
print(table_mipso32)
print()

